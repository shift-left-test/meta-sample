diff --git a/src/corelib/kernel/qproperty_p.h b/src/corelib/kernel/qproperty_p.h
index 71f4f9f5e9..1bf3d490f1 100644
--- a/src/corelib/kernel/qproperty_p.h
+++ b/src/corelib/kernel/qproperty_p.h
@@ -551,7 +551,7 @@ public:
             if (!inBindingWrapper(storage))
                 notify(bd);
         }
-        if constexpr (Signal != nullptr) {
+        if constexpr (!std::is_same_v<decltype(Signal), nullptr_t>) {
             if constexpr (SignalTakesValue::value)
                 (owner()->*Signal)(value());
             else
diff --git a/src/corelib/text/qregularexpression.cpp b/src/corelib/text/qregularexpression.cpp
index b0728bca4a..84948be50e 100644
--- a/src/corelib/text/qregularexpression.cpp
+++ b/src/corelib/text/qregularexpression.cpp
@@ -1185,13 +1185,14 @@ void QRegularExpressionPrivate::doMatch(QRegularExpressionMatchPrivate *priv,
     // subject may have data == nullptr. In this case, to keep PCRE
     // happy, pass a pointer to a dummy character.
     const char16_t dummySubject = 0;
+    const char16_t * const pDummySubject = &dummySubject;
     const char16_t * const subjectUtf16 = [&]()
     {
         const auto subjectUtf16 = priv->subject.utf16();
         if (subjectUtf16)
             return subjectUtf16;
         Q_ASSERT(subjectLength == 0);
-        return &dummySubject;
+        return pDummySubject;
     }();
 
     int result;
diff --git a/src/corelib/time/qdatetime.cpp b/src/corelib/time/qdatetime.cpp
index f0841ca853..98e20ae921 100644
--- a/src/corelib/time/qdatetime.cpp
+++ b/src/corelib/time/qdatetime.cpp
@@ -4000,7 +4000,7 @@ void QDateTime::setMSecsSinceEpoch(qint64 msecs)
         status |= QDateTimePrivate::ValidWhenMask;
         break;
     case Qt::OffsetFromUTC:
-        if (!add_overflow(msecs, d->m_offsetFromUtc * MSECS_PER_SEC, &msecs))
+        if (!add_overflow(msecs, qint64(d->m_offsetFromUtc * MSECS_PER_SEC), &msecs))
             status |= QDateTimePrivate::ValidWhenMask;
         break;
     case Qt::TimeZone:
